---
import Container from '@/components/base-components/Container.astro';
import Titulo from '@/components/base-components/Titulo.astro';
import imgFondo from '@/assets/svg/logo_sin_fondo.svg';
import dataServPersonas from '@/Data/itemsServiciosPersonas.json';
import ItemServiciosModal from '@/components/base-components/ItemServiciosModal.astro';
---

<Container id="servicios">
  <Titulo
    titulo="Mis servicios"
    texto="Lorem ipsum dolor sit amet consectetur. In ultrices egestas morbi condimentum non leo volutpat id in. Pulvinar eu vitae lobortis donec orci blandit. Viverra fusce ipsum pellentesque aenean id pharetra erat faucibus sit. "
  />

  <div class="relative mx-auto grid h-[700px] w-full place-items-center">
    <div
      class="absolute top-1/2 left-1/2 -z-10 flex h-1/3 w-1/3 -translate-x-1/2 -translate-y-1/2 flex-col items-center justify-center"
    >
      <img
        src={imgFondo.src}
        alt=""
        class="aspect-square h-[80%] w-[80%] object-contain object-top"
      />
      <p class="text-6xl font-black text-oxfordblue-500">PERSONAS</p>
    </div>

    <div class="centro relative">
      {
        dataServPersonas.map((item) => (
          <ItemServiciosModal
            titulo={item.titulo}
            descripcion={item.descripcion}
            urlDestino={item.urlDestino}
            vertical={item.vertical}
            horizontal={item.horizontal}
            verticalFlecha={item.verticalFlecha}
            horizontalFlecha={item.horizontalFlecha}
            rotate={item.rotate}
          />
        ))
      }
    </div>
    <dialog
      closedby="any"
      id="modal"
      class="modal fixed inset-0 m-auto w-2/5 rounded-3xl border-2 border-turquoise-200 bg-oxfordblue-500/80 p-6 text-seasalt-100 shadow-lg backdrop-blur-md backdrop:bg-transparent backdrop:backdrop-blur-xs"
    >
      <div class="relative flex items-center justify-center">
        <p class="titulo mb-4 text-4xl font-bold"></p>
        <form method="dialog">
          <button
            class="absolute -top-4 -right-3 cursor-pointer text-xl font-bold transition-colors duration-300 ease-linear hover:text-turquoise-400"
            >X</button
          >
        </form>
      </div>

      <p class="descripcion text-lg font-light text-pretty"> </p>

      <div class="mt-4 flex h-full items-center justify-center">
        <a
          class="urlDestino flex h-full cursor-pointer flex-col items-center justify-center rounded-lg bg-neutral-50 px-3 py-4 text-2xl font-semibold text-neutral-900 transition-all duration-500 hover:scale-[98%] 2xl:px-6"
          href={''}
        >
          <p class="">Comencemos</p>
        </a>
      </div>
    </dialog>
  </div>

  <div></div>
</Container>

<style>
  svg .svg-flecha-1 {
    stroke-dashoffset: 338.4143371582031px;
    stroke-dasharray: 338.4143371582031px;
    -webkit-transition: stroke-dashoffset 1s linear 0s;
    transition: stroke-dashoffset 1s linear 0s;
  }

  svg.active .svg-elem-1 {
    stroke-dashoffset: 676.8286743164062px;
  }

  .centro {
    position: relative;
    width: 100px;

    aspect-ratio: 1;
  }

  .modal {
    opacity: 0;
    scale: 0;
    transition:
      opacity 0.5s ease-in-out,
      scale 0.5s ease-in-out,
      display 0.5s ease-in-out;
    transition-behavior: allow-discrete;
  }

  .modal[open] {
    opacity: 1;
    scale: 1;
  }

  @starting-style {
    .modal[open] {
      opacity: 0;
      scale: 0;
    }
  }
</style>

<script>
  document.addEventListener('astro:page-load', () => {
    const servicios = document.querySelectorAll('.servicio');

    servicios.forEach((servicio) => {
      servicio.addEventListener('click', () => {
        const modal = document.getElementById('modal') as HTMLDialogElement;
        const titulo = document.querySelector('.titulo') as HTMLParagraphElement;
        const descripcion = document.querySelector('.descripcion') as HTMLParagraphElement;
        const urlDestino = document.querySelector('.urlDestino') as HTMLAnchorElement;
        const tituloModal = servicio.getAttribute('data-titulo') as string;
        const descripcionModal = servicio.getAttribute('data-descripcion') as string;
        const urlDestinoModal = servicio.getAttribute('data-urlDestino') as string;
        titulo.textContent = tituloModal;
        descripcion.textContent = descripcionModal;
        urlDestino.href = urlDestinoModal;
        modal.showModal();
      });
    });

    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            /* agrega la clase de animacion */
            /* @ts-ignore */
            entry.target.classList.add('servicio__animacion');
            observer.unobserve(entry.target);
          }
        });
      },
      { threshold: 0.5 }
    );

    servicios.forEach((servicio) => observer.observe(servicio));
  });
</script>
