---
import Container from '@/components/base-components/Container.astro';
import Titulo from '@/components/base-components/Titulo.astro';
---

<Container id="servicios">
  <Titulo
    titulo="Mis servicios"
    texto="Lorem ipsum dolor sit amet consectetur. In ultrices egestas morbi condimentum non leo volutpat id in. Pulvinar eu vitae lobortis donec orci blandit. Viverra fusce ipsum pellentesque aenean id pharetra erat faucibus sit. "
  />

  <div
    class="mx-auto grid h-[700px] w-full place-items-center bg-[url('../assets/svg/logo_compacto.svg')] bg-contain bg-center bg-no-repeat"
  >
    <div class="centro text-white">
      <div class="servicio" style="--horizontal:200% ; --vertical:200%;">1</div>
      <div class="servicio" style="--horizontal:350% ; --vertical:0%;">2</div>
      <div class="servicio" style="--horizontal:-450% ; --vertical:-200%;">3</div>
      <div class="servicio" style="--horizontal:-350% ; --vertical:0%;">4</div>
      <div class="servicio" style="--horizontal:0% ; --vertical:-200%;">5</div>
      <div class="servicio" style="--horizontal:-200% ; --vertical:200%;">6</div>
      <div class="servicio" style="--horizontal:230% ; --vertical:-200%;">7</div>
    </div>
  </div>
  <div></div>
</Container>

<style>
  svg .svg-flecha-1 {
    stroke-dashoffset: 338.4143371582031px;
    stroke-dasharray: 338.4143371582031px;
    -webkit-transition: stroke-dashoffset 1s linear 0s;
    transition: stroke-dashoffset 1s linear 0s;
  }

  svg.active .svg-elem-1 {
    stroke-dashoffset: 676.8286743164062px;
  }

  .centro {
    position: relative;
    height: 200px;
    aspect-ratio: 1;
    background-color: aqua;
    z-index: 0;
  }

  .servicio {
    --size: 100px;
    --vertical: 0;
    --horizontal: 0;
    opacity: 0;
    position: absolute;
    aspect-ratio: 1;
    width: var(--size);
    aspect-ratio: 1;
    top: calc(var(--size) / 2);
    left: calc(var(--size) / 2);
    background: #000;
    z-index: 100;

    /* transform: translate(
      calc(cos(var(--angulo)) * var(--offset)),
      calc(sin(var(--angulo)) * var(--offset))
    ); */
    /* transform: translate(var(--horizontal), var(--vertical)); */
  }

  /*   .servicio:nth-child(1) {
    --horizontal: 200%;
    --vertical: 20%;
  } */

  .servicio__animacion {
    animation: moveOut 1s linear forwards;
  }
  @keyframes moveOut {
    0% {
      opacity: 0;
      transform: translate(0, 0);
    }
    100% {
      opacity: 1;
      transform: translate(var(--horizontal), var(--vertical));
    }
  }
</style>

<script>
  document.addEventListener('astro:page-load', () => {
    const servicios = document.querySelectorAll('.servicio');

    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            /* agrega la clase de animacion */
            /* @ts-ignore */
            entry.target.classList.add('servicio__animacion');
            observer.unobserve(entry.target);
          }
        });
      },
      { threshold: 0.5 }
    );

    servicios.forEach((servicio) => observer.observe(servicio));
  });
</script>

<!-- 
<script>
  document.addEventListener('astro:page-load', () => {
    const servicios = document.querySelectorAll('.servicio');

    // asignar Ã¡ngulos
    servicios.forEach((servicio, index) => {
      servicio.style.setProperty('--angulo', `${(index * 360) / servicios.length}deg`);
    });

    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            animateOffset(entry.target, 300, 1000); // hasta 200px en 1s
            observer.unobserve(entry.target);
          }
        });
      },
      { threshold: 0.5 }
    );

    servicios.forEach((servicio) => observer.observe(servicio));

    function animateOffset(el, target, duration) {
      let start = null;
      const initial = parseFloat(getComputedStyle(el).getPropertyValue('--offset')) || 0;

      function step(ts) {
        if (!start) start = ts;
        const progress = Math.min((ts - start) / duration, 1);
        const current = initial + (target - initial) * progress;
        el.style.setProperty('--offset', current + 'px');
        el.style.setProperty('opacity', progress);
        if (progress < 1) requestAnimationFrame(step);
      }

      requestAnimationFrame(step);
    }
  });
</script> -->
