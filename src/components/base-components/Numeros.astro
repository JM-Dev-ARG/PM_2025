---
import dataNumeros from '@/data/numeros.json';
import Subrayado from './Subrayado.astro';
---

<div
  class="counter-section flex w-full grid-cols-1 flex-col items-center justify-center gap-8 sm:flex-row sm:items-start sm:justify-around sm:gap-0 xl:w-[80%]"
>
  {
    dataNumeros.map((item) => {
      const palabras = item.titulo.split(' ');
      const ultima = palabras.pop();
      const inicio = palabras.join(' ');

      return (
        <div class="felx-1 flex flex-col items-center justify-center gap-3">
          <span class="relative px-2 text-center font-titulo text-[100px] leading-[90px] font-black tracking-wider text-transparent sm:text-[85px] lg:text-[120px] lg:leading-[100px]">
            {item.label}
            <p
              class={`texto-borde ${item.value ? 'value2' : 'value'} absolute top-0 left-0 h-full w-full bg-risdblue-300 text-center font-titulo text-[100px] leading-[90px] font-black tracking-wider text-seasalt-100 sm:text-[85px] lg:text-[120px] lg:leading-[100px]`}
              aria-label={item.label}
            >
              0
            </p>
          </span>

          <p class="relative max-w-[150px] text-center text-3xl font-extrabold text-blackolive-100 sm:max-w-[200px] lg:max-w-[220px] lg:text-2xl xl:max-w-[250px] xl:text-3xl">
            {inicio}{' '}
            <span class="relative inline-block">
              {ultima}
              <Subrayado />
            </span>
          </p>
        </div>
      );
    })
  }
</div>

<style>
  .texto-borde {
    background-clip: text;
    -webkit-text-stroke: 0.08em transparent;
    -moz-text-stroke: 0.08em transparent;
  }
</style>

<script>
  document.addEventListener('astro:page-load', () => {
    function animateCounters() {
      const counters = document.querySelectorAll('.value') as any;
      const speed = 300;

      counters.forEach((counter: any) => {
        const animate = () => {
          const value = +counter.getAttribute('aria-label');
          const data = +counter.innerText;
          const time = value / speed;
          if (data < value) {
            counter.innerText = Math.ceil(data + time);
            setTimeout(animate, 1);
          } else {
            counter.innerText = value;
          }
        };
        animate();
      });

      const counters2 = document.querySelectorAll('.value2') as any;
      counters2.forEach((counter: any) => {
        const animate = () => {
          const value = +counter.getAttribute('aria-label');
          const data = +counter.innerText;
          const time = value / speed;
          if (data < value) {
            counter.innerText = Math.ceil(data + time);
            setTimeout(animate, 150);
          } else {
            counter.innerText = value;
          }
        };
        animate();
      });
    }

    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            animateCounters();
            observer.unobserve(entry.target);
          }
        });
      },
      {
        threshold: 0.5,
      }
    );

    const section = document.querySelector('.counter-section');
    if (section) observer.observe(section);
  });
</script>
