---
import data from '@/data/hitos.json';
import CardHitos from './CardHitos.astro';
---

<div class="flex w-full items-center justify-between gap-6">
  {data.map((hito) => <CardHitos {...hito} />)}
</div>

<!-- <script>
  document.addEventListener('astro:page-load', () => {
    const paths = document.querySelectorAll('.svg-path');
    const esferas = document.querySelectorAll('.hito-esfera');
    if (!paths.length) return;

    const observer = new IntersectionObserver(
      (entries, observer) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            const path = entry.target;
            const index = Array.from(paths).indexOf(path);
            const delay = index * 0.8;
            path.style.setProperty('--delay', `${delay}s`);

            path.classList.add('svg-animation');

            observer.unobserve(path);
          }
        });
      },
      { threshold: 0.5 }
    );

    paths.forEach((path: any) => observer.observe(path));
  });
</script> -->
<script>
  document.addEventListener('astro:page-load', () => {
    const esferas = document.querySelectorAll('.hito-esfera');
    const paths = document.querySelectorAll('.svg-path');

    if (!paths.length) return;

    const observer = new IntersectionObserver(
      (entries, observer) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            const path = entry.target;
            const index = Array.from(paths).indexOf(path);

            const delay = index * 1.3;
            path.style.setProperty('--delay', `${delay}s`);
            path.classList.add('svg-animation');

            // animar línea del círculo solo si hay siguiente hito
            if (esferas[index] && index < esferas.length - 1) {
              // calcular ancho de la línea según distancia al siguiente círculo
              const siguiente = esferas[index + 1];
              const rect1 = esferas[index].getBoundingClientRect();
              const rect2 = siguiente.getBoundingClientRect();
              const distance = rect2.left - rect1.right;
              esferas[index].style.setProperty('--line-width', distance + 'px');

              esferas[index].classList.add('linea-animada');
            }

            observer.unobserve(path);
          }
        });
      },
      { threshold: 0.5 }
    );

    paths.forEach((path) => observer.observe(path));
  });
</script>
